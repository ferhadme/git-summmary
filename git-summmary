#!/usr/bin/perl

=about

Author: Farhad Mehdizada (@ferhadme)

Perl script for visualizing repository summaries recursively starting from the specified directory location
Uses git-summary (git-extras) as a dependency

Usage: ./git-summmary starting-directory

base directory                  : <base directory name>
repo age (latest / oldest)      : <latest> day(s) / <oldest> day(s)
active (earliest / most recent) : <earliest> day(s) / <most recent> day(s)
commits                         : <total number of commits>
files                           : <total number of files>
authors                         :
  <author_1 commits count>  <author_1 name>  <author_1 commit percentage>
  ...
  <author_n commits count>  <author_n name>  <author_n commit percentage>

=cut

use strict;
use warnings;
use v5.32;


sub main {
    my $path = shift @ARGV or die "Usage: ./git-summmary starting-directory";
    if (not defined $path) {
	die "Usage: ./git-summmary starting-directory";
    }

    my $git_summary_path = system("which git-summary");
    if ($git_summary_path != 0) {
	die "git-summary (git-extras) as a dependency not found";
    }

    my %summary_hash = &init_summary($path);
    my %authors_hash = ();
    &traverse_repos($path, \%summary_hash, \%authors_hash);
    &show_git_summmary(\%summary_hash, \%authors_hash);
}

sub traverse_repos {
    (my $path, my $summary_hash_ref, my $authors_hash_ref) = (@_);

    if (not -d $path) {
	return;
    }

    chdir($path);
    if (-d ".git") {
	print "Git repository found ", $path, "\n";
	&update_summary($summary_hash_ref, $authors_hash_ref);
    }

    foreach my $dir (<*>) {
	&traverse_repos($dir, $summary_hash_ref, $authors_hash_ref);
    }

    chdir("..");
}

sub update_summary {
    my ($summ_hash_ref, $authors_hash_ref) = (@_);
    my $curr_summ = `git summary`;

    $curr_summ =~ /repo age\s*:\s((\d+)\syears?(,\s)?)?((\d+)\smonths?(,\s)?)?((\d+)\sweeks?(,\s)?)?((\d+)\sdays?(,\s)?)?/;
    my $curr_age = ($2 || 0) * 3600 + ($5 || 0) * 30 + ($8 || 0) * 7 + ($11 || 0);
    &init_min_max_params($curr_age, "age", $summ_hash_ref);

    my ($curr_active) = ($curr_summ =~ /active\s*:\s(\d+)\sdays/);
    &init_min_max_params($curr_active, "active", $summ_hash_ref);

    my ($commits) = ($curr_summ =~ /commits\s*:\s(\d+)/);
    $summ_hash_ref->{"commits"} += $commits;

    my ($files) = ($curr_summ =~ /files\s*:\s(\d+)/);
    $summ_hash_ref->{"files"} += $files;

    while ($curr_summ =~ /(\d+)\t(\w+(\s\w+)?)\s+(\d+.\d+)%/g) {
	if (!defined $authors_hash_ref->{$2}) {
	    $authors_hash_ref->{$2} = $1;
	} else {
	    $authors_hash_ref->{$2} += $1;
	}
    }
}

sub init_min_max_params {
    (my $curr, my $hash_key, my $hash_ref) = (@_);

    if (!defined $hash_ref->{"min_$hash_key"} || $curr < $hash_ref->{"min_$hash_key"}) {
	$hash_ref->{"min_$hash_key"} = $curr;
    }

    if ($curr > $hash_ref->{"max_$hash_key"}) {
	$hash_ref->{"max_$hash_key"} = $curr;
    }
}

sub init_summary {
    (
     "dirname" => (@_),
     "min_age" => undef,
     "max_age" => 0,
     "min_active" => undef,
     "max_active" => 0,
     "commits" => 0,
     "files" => 0
    );
}

sub frmt_day {
    ($_) = (@_);
    return "$_ day" . ($_ > 1 ? "s" : "");
}

sub show_git_summmary {
    (my $summary_hash_ref, my $authors_hash_ref) = (@_);

    print "\n";
    print "base directory                  : ", $summary_hash_ref->{"dirname"}, "\n";
    print "repo age (latest / oldest)      : ", frmt_day($summary_hash_ref->{"min_age"}), " / ",
	frmt_day($summary_hash_ref->{"max_age"}), "\n";
    print "active (earliest / most recent) : ", frmt_day($summary_hash_ref->{"min_active"}), " / ",
	frmt_day($summary_hash_ref->{"max_active"}), "\n";
    print "commits                         : ", $summary_hash_ref->{"commits"}, "\n";
    print "files                           : ", $summary_hash_ref->{"files"}, "\n";

    print "authors                         :\n";
    my $ident_c = 0;
    my $ident_a = 0;
    foreach my $k (keys %$authors_hash_ref) {
	$ident_c = length("$authors_hash_ref->{$k}") if length("$authors_hash_ref->{$k}") > $ident_c;
	$ident_a = length($k) if length($k) > $ident_a;
    }

    foreach my $k (sort { $authors_hash_ref->{$a} <=> $authors_hash_ref->{$b} } keys %$authors_hash_ref) {
	print "  $authors_hash_ref->{$k}  ", " " x ($ident_c - length("$authors_hash_ref->{$k}")),
	    "$k  ", " " x ($ident_a - length($k)),
	    sprintf "%.2f\n", ($authors_hash_ref->{$k} / $summary_hash_ref->{"commits"}) * 100;
    }
}


main;
exit;
